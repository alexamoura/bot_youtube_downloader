#!/usr/bin/env python3
"""
bot_with_cookies_melhorado.py - Vers√£o Profissional

Telegram bot (webhook) com sistema de controle de downloads e suporte a pagamento PIX
"""
import os
import sys
import tempfile
import asyncio
import base64
import logging
import threading
import uuid
import re
import time
import sqlite3
import shutil
import subprocess
from collections import OrderedDict
from contextlib import contextmanager
from urllib.parse import urlparse, parse_qs, unquote
from datetime import datetime, timedelta
import io
import yt_dlp

try:
    import requests
    from bs4 import BeautifulSoup
    REQUESTS_AVAILABLE = True
except ImportError:
    REQUESTS_AVAILABLE = False

try:
    from PIL import Image
    PIL_AVAILABLE = True
except ImportError:
    PIL_AVAILABLE = False
    
try:
    import mercadopago
    MERCADOPAGO_AVAILABLE = True
except ImportError:
    MERCADOPAGO_AVAILABLE = False

try:
    from groq import Groq
    GROQ_AVAILABLE = True
except ImportError:
    GROQ_AVAILABLE = False

# ============================================================
# SHOPEE VIDEO EXTRACTOR - SEM MARCA D'√ÅGUA
# ============================================================

class ShopeeVideoExtractor:
    """Extrator de v√≠deos da Shopee sem marca d'√°gua usando API interna"""
    
    def __init__(self):
        self.session = requests.Session() if REQUESTS_AVAILABLE else None
        if self.session:
            self.session.headers.update({
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                'Accept': 'application/json',
                'Referer': 'https://shopee.com.br/',
            })
    
    def extract_ids(self, url: str):
        """Extrai shop_id e item_id da URL"""
        patterns = [
            r'/product/(\d+)/(\d+)',
            r'-i\.(\d+)\.(\d+)',
            r'\.i\.(\d+)\.(\d+)',
        ]
        for pattern in patterns:
            match = re.search(pattern, url)
            if match:
                return (match.group(1), match.group(2))
        return None
    
    def extract_video_from_html(self, url: str):
        """Extrai v√≠deo diretamente do HTML para URLs sv.shopee.com.br"""
        if not REQUESTS_AVAILABLE or not self.session:
            return None
        
        try:
            LOG.info("üîç Extraindo v√≠deo do HTML da p√°gina...")
            response = self.session.get(url, timeout=10)
            html = response.text
            
            # Padr√µes para encontrar URL do v√≠deo
            patterns = [
                r'"video_url"\s*:\s*"([^"]+)"',
                r'"url"\s*:\s*"(https://[^"]*\.mp4[^"]*)"',
                r'(https://cf\.shopee\.com\.br/file/[a-zA-Z0-9_-]+)',
                r'(https://[^"\']*shopee[^"\']*\.mp4[^"\']*)',
            ]
            
            for pattern in patterns:
                matches = re.findall(pattern, html)
                if matches:
                    video_url = matches[0].replace('\\/', '/')
                    LOG.info("‚úÖ URL de v√≠deo encontrada no HTML!")
                    return {
                        'url': video_url,
                        'title': 'V√≠deo da Shopee',
                        'uploader': 'Desconhecido',
                    }
            
            return None
            
        except Exception as e:
            LOG.error("Erro ao extrair do HTML: %s", e)
            return None
    
    def get_video(self, url: str):
        """Extrai v√≠deo da Shopee sem marca d'√°gua via API"""
        if not REQUESTS_AVAILABLE or not self.session:
            return None
        
        try:
            # Se for URL de v√≠deo (sv.shopee.com.br), usa extra√ß√£o HTML
            if 'sv.shopee' in url.lower() or 'share-video' in url.lower():
                LOG.info("üé¨ Detectado URL de v√≠deo direto (sv.shopee.com.br)")
                return self.extract_video_from_html(url)
            
            # Sen√£o, tenta API normal
            ids = self.extract_ids(url)
            if not ids:
                LOG.warning("‚ö†Ô∏è N√£o foi poss√≠vel extrair IDs da URL")
                # Tenta HTML como fallback
                return self.extract_video_from_html(url)
            
            shop_id, item_id = ids
            LOG.info("üîë IDs extra√≠dos - Shop: %s, Item: %s", shop_id, item_id)
            
            api_url = "https://shopee.com.br/api/v4/item/get"
            params = {'itemid': item_id, 'shopid': shop_id}
            
            response = self.session.get(api_url, params=params, timeout=10)
            data = response.json()
            
            if 'data' not in data:
                LOG.warning("‚ö†Ô∏è API n√£o retornou dados")
                return self.extract_video_from_html(url)
            
            item = data['data']
            
            # Tenta extrair v√≠deo
            if 'video_info_list' in item and item['video_info_list']:
                video = item['video_info_list'][0]
                if 'default_format' in video:
                    LOG.info("‚úÖ V√≠deo encontrado em video_info_list")
                    return {
                        'url': video['default_format'].get('url'),
                        'title': item.get('name', 'V√≠deo da Shopee'),
                        'uploader': item.get('shop_name', 'Desconhecido'),
                    }
            
            if 'video' in item and item['video']:
                LOG.info("‚úÖ V√≠deo encontrado em campo video")
                return {
                    'url': item['video'].get('url'),
                    'title': item.get('name', 'V√≠deo da Shopee'),
                    'uploader': item.get('shop_name', 'Desconhecido'),
                }
            
            LOG.warning("‚ö†Ô∏è Nenhum v√≠deo na resposta da API, tentando HTML...")
            return self.extract_video_from_html(url)
            
            return None
            
        except Exception as e:
            LOG.error("Erro no ShopeeVideoExtractor: %s", e)
            return None

# Inst√¢ncia global
SHOPEE_EXTRACTOR = ShopeeVideoExtractor()


from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)

# Configura√ß√£o de Logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
LOG = logging.getLogger("ytbot")

# Token do Bot
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    LOG.error("TELEGRAM_BOT_TOKEN n√£o definido.")
    sys.exit(1)

LOG.info("TELEGRAM_BOT_TOKEN presente (len=%d).", len(TOKEN))

# Constantes do Sistema
URL_RE = re.compile(r"(https?://[^\s]+)")
DB_FILE = os.getenv("DB_FILE", "/data/users.db") if os.path.exists("/data") else "users.db"
PENDING_MAX_SIZE = 1000
PENDING_EXPIRE_SECONDS = 600
WATCHDOG_TIMEOUT = 180
MAX_FILE_SIZE = 50 * 1024 * 1024  # 50 MB - limite para v√≠deos curtos
SPLIT_SIZE = 45 * 1024 * 1024

# Constantes de Controle de Downloads
FREE_DOWNLOADS_LIMIT = 10
MAX_CONCURRENT_DOWNLOADS = 3  # At√© 3 downloads simult√¢neos

# Configura√ß√£o do Mercado Pago
MERCADOPAGO_ACCESS_TOKEN = os.getenv("MERCADOPAGO_ACCESS_TOKEN")
PREMIUM_PRICE = float(os.getenv("PREMIUM_PRICE", "9.90"))
PREMIUM_DURATION_DAYS = int(os.getenv("PREMIUM_DURATION_DAYS", "30"))

if MERCADOPAGO_AVAILABLE and MERCADOPAGO_ACCESS_TOKEN:
    LOG.info("‚úÖ Mercado Pago configurado - Token: %s...", MERCADOPAGO_ACCESS_TOKEN[:20])
else:
    if not MERCADOPAGO_AVAILABLE:
        LOG.warning("‚ö†Ô∏è mercadopago n√£o instalado - pip install mercadopago")
    if not MERCADOPAGO_ACCESS_TOKEN:
        LOG.warning("‚ö†Ô∏è MERCADOPAGO_ACCESS_TOKEN n√£o configurado")

# Configura√ß√£o do Groq (IA)
GROQ_API_KEY = os.getenv("GROQ_API_KEY")
groq_client = None

if GROQ_AVAILABLE and GROQ_API_KEY:
    try:
        groq_client = Groq(api_key=GROQ_API_KEY)
        LOG.info("‚úÖ Groq AI configurado - Intelig√™ncia artificial ativa!")
    except Exception as e:
        LOG.error("‚ùå Erro ao inicializar Groq: %s", e)
        groq_client = None
else:
    if not GROQ_AVAILABLE:
        LOG.warning("‚ö†Ô∏è groq n√£o instalado - pip install groq")
    if not GROQ_API_KEY:
        LOG.warning("‚ö†Ô∏è GROQ_API_KEY n√£o configurado - IA desativada")

# Estado Global
PENDING = OrderedDict()
DB_LOCK = threading.Lock()
DOWNLOAD_SEMAPHORE = asyncio.Semaphore(MAX_CONCURRENT_DOWNLOADS)  # Controle de fila
ACTIVE_DOWNLOADS = {}  # Rastreamento de downloads ativos

# Mensagens Profissionais do Bot
MESSAGES = {
    "welcome": (
        "üé• <b>Bem-vindo ao Servi√ßo de Downloads</b>\n\n"
        "Envie um link de v√≠deo de YouTube, Instagram ou Shopee e eu processarei o download para voc√™.\n\n"
        "üìä <b>Planos dispon√≠veis:</b>\n"
        "‚Ä¢ Gratuito: {free_limit} downloads/m√™s\n"
        "‚Ä¢ Premium: Downloads ilimitados\n\n"
        "‚öôÔ∏è <b>Especifica√ß√µes:</b>\n"
        "‚Ä¢ V√≠deos curtos (at√© 50 MB)\n"
        "‚Ä¢ Qualidade at√© 720p\n"
        "‚Ä¢ Fila: at√© 3 downloads simult√¢neos\n\n"
        "Digite /status para verificar seu saldo de downloads ou /premium para assinar o plano."
    ),
    "url_prompt": "üìé Por favor, envie o link do v√≠deo que deseja baixar.",
    "processing": "‚öôÔ∏è Processando sua solicita√ß√£o...",
    "invalid_url": "‚ö†Ô∏è O link fornecido n√£o √© v√°lido. Por favor, verifique e tente novamente.",
    "file_too_large": "‚ö†Ô∏è <b>Arquivo muito grande</b>\n\nEste v√≠deo excede o limite de 50 MB. Por favor, escolha um v√≠deo mais curto.",
    "confirm_download": "üé¨ <b>Confirmar Download</b>\n\nüìπ V√≠deo: {title}\n‚è±Ô∏è Dura√ß√£o: {duration}\nüì¶ Tamanho: {filesize}\n\n‚úÖ Deseja prosseguir com o download?",
    "queue_position": "‚è≥ Aguardando na fila... Posi√ß√£o: {position}\n\n{active} downloads em andamento.",
    "download_started": "üì• Download iniciado. Aguarde enquanto processamos seu v√≠deo...",
    "download_progress": "üì• Progresso: {percent}%\n{bar}",
    "download_complete": "‚úÖ Download conclu√≠do. Enviando arquivo...",
    "upload_complete": "‚úÖ V√≠deo enviado com sucesso!\n\nüìä Downloads restantes: {remaining}/{total}",
    "limit_reached": (
        "‚ö†Ô∏è <b>Limite de Downloads Atingido</b>\n\n"
        "Voc√™ atingiu o limite de {limit} downloads gratuitos.\n\n"
        "üíé <b>Adquira o Plano Premium para downloads ilimitados!</b>\n\n"
        "üí≥ Valor: R$ 9,90/m√™s\n"
        "üîÑ Pagamento via PIX\n\n"
        "Entre em contato para mais informa√ß√µes: /premium"
    ),
    "status": (
        "üìä <b>Status da Sua Conta</b>\n\n"
        "üë§ ID: {user_id}\n"
        "üì• Downloads realizados: {used}/{total}\n"
        "üíæ Downloads restantes: {remaining}\n"
        "üìÖ Per√≠odo: Mensal\n\n"
        "{premium_info}"
    ),
    "premium_info": (
        "üíé <b>Informa√ß√µes sobre o Plano Premium</b>\n\n"
        "‚ú® <b>Benef√≠cios:</b>\n"
        "‚Ä¢ Downloads ilimitados\n"
        "‚Ä¢ Qualidade m√°xima (at√© 1080p)\n"
        "‚Ä¢ Processamento priorit√°rio\n"
        "‚Ä¢ Suporte dedicado\n\n"
        "üí∞ <b>Valor:</b> R$ 9,90/m√™s\n\n"
        "üì± <b>Como contratar:</b>\n"
        "1Ô∏è‚É£ Clique no bot√£o \"Assinar Premium\"\n"
        "2Ô∏è‚É£ Escaneie o QR Code PIX gerado\n"
        "3Ô∏è‚É£ Confirme o pagamento no seu banco\n"
        "4Ô∏è‚É£ Aguarde a ativa√ß√£o autom√°tica (30-60 segundos)\n\n"
        "‚ö° <b>Ativa√ß√£o instant√¢nea via PIX!</b>"
    ),
    "stats": "üìà <b>Estat√≠sticas do Bot</b>\n\nüë• Usu√°rios ativos este m√™s: {count}",
    "error_timeout": "‚è±Ô∏è O tempo de processamento excedeu o limite. Por favor, tente novamente.",
    "error_network": "üåê Erro de conex√£o detectado. Verifique sua internet e tente novamente em alguns instantes.",
    "error_file_large": "üì¶ O arquivo excede o limite de 50 MB. Por favor, escolha um v√≠deo mais curto.",
    "error_ffmpeg": "üé¨ Ocorreu um erro durante o processamento do v√≠deo.",
    "error_upload": "üì§ Falha ao enviar o arquivo. Por favor, tente novamente.",
    "error_unknown": "‚ùå Um erro inesperado ocorreu. Nossa equipe foi notificada. Por favor, tente novamente.",
    "error_expired": "‚è∞ Esta solicita√ß√£o expirou. Por favor, envie o link novamente.",
    "download_cancelled": "üö´ Download cancelado com sucesso.",
    "cleanup": "üßπ Limpeza: removido {path}",
}

app = Flask(__name__)

# Inicializa√ß√£o do Telegram Application
try:
    application = ApplicationBuilder().token(TOKEN).build()
    LOG.info("ApplicationBuilder criado com sucesso.")
except Exception as e:
    LOG.exception("Erro ao construir ApplicationBuilder")
    sys.exit(1)

# Loop de Eventos Asyncio
APP_LOOP = asyncio.new_event_loop()

def _start_loop(loop):
    """Inicia o event loop em background"""
    asyncio.set_event_loop(loop)
    loop.run_forever()

LOG.info("Iniciando event loop de background...")
loop_thread = threading.Thread(target=_start_loop, args=(APP_LOOP,), daemon=True)
loop_thread.start()

try:
    fut = asyncio.run_coroutine_threadsafe(application.initialize(), APP_LOOP)
    fut.result(timeout=30)
    LOG.info("Application inicializada.")
except Exception as e:
    LOG.exception("Falha ao inicializar Application")
    sys.exit(1)

# ============================
# DATABASE - Sistema de Controle de Downloads
# ============================

def init_db():
    """Inicializa o banco de dados com as tabelas necess√°rias"""
    with DB_LOCK:
        try:
            conn = sqlite3.connect(DB_FILE, timeout=10)
            c = conn.cursor()
            
            # Tabela de usu√°rios mensais
            c.execute("""
                CREATE TABLE IF NOT EXISTS monthly_users (
                    user_id INTEGER PRIMARY KEY,
                    last_month TEXT
                )
            """)
            
            # Tabela de controle de downloads
            c.execute("""
                CREATE TABLE IF NOT EXISTS user_downloads (
                    user_id INTEGER PRIMARY KEY,
                    downloads_count INTEGER DEFAULT 0,
                    is_premium INTEGER DEFAULT 0,
                    premium_expires TEXT,
                    last_reset TEXT,
                    created_at TEXT DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            # Tabela de hist√≥rico de pagamentos PIX (para implementa√ß√£o futura)
            c.execute("""
                CREATE TABLE IF NOT EXISTS pix_payments (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    amount REAL NOT NULL,
                    pix_key TEXT,
                    status TEXT DEFAULT 'pending',
                    created_at TEXT DEFAULT CURRENT_TIMESTAMP,
                    confirmed_at TEXT,
                    FOREIGN KEY (user_id) REFERENCES user_downloads(user_id)
                )
            """)
            
            conn.commit()
            conn.close()
            LOG.info("Banco de dados inicializado com sucesso.")
        except sqlite3.Error as e:
            LOG.error("Erro ao inicializar banco de dados: %s", e)

def update_user(user_id: int):
    """Atualiza o registro de acesso mensal do usu√°rio"""
    with DB_LOCK:
        try:
            conn = sqlite3.connect(DB_FILE, timeout=10)
            c = conn.cursor()
            month = time.strftime("%Y-%m")
            c.execute("SELECT last_month FROM monthly_users WHERE user_id=?", (user_id,))
            row = c.fetchone()
            if row:
                if row[0] != month:
                    c.execute("UPDATE monthly_users SET last_month=? WHERE user_id=?", (month, user_id))
            else:
                c.execute("INSERT INTO monthly_users (user_id, last_month) VALUES (?, ?)", (user_id, month))
            conn.commit()
            conn.close()
        except sqlite3.Error as e:
            LOG.error("Erro ao atualizar usu√°rio: %s", e)

def get_user_download_stats(user_id: int) -> dict:
    """Retorna estat√≠sticas de downloads do usu√°rio"""
    with DB_LOCK:
        try:
            conn = sqlite3.connect(DB_FILE, timeout=10)
            c = conn.cursor()
            
            # Busca ou cria registro do usu√°rio
            c.execute("SELECT downloads_count, is_premium, last_reset FROM user_downloads WHERE user_id=?", (user_id,))
            row = c.fetchone()
            
            current_month = time.strftime("%Y-%m")
            
            if row:
                downloads_count, is_premium, last_reset = row
                
                # Reseta contador se mudou o m√™s
                if last_reset != current_month and not is_premium:
                    downloads_count = 0
                    c.execute("UPDATE user_downloads SET downloads_count=0, last_reset=? WHERE user_id=?", 
                             (current_month, user_id))
                    conn.commit()
            else:
                # Cria novo registro
                downloads_count, is_premium = 0, 0
                c.execute("""
                    INSERT INTO user_downloads (user_id, downloads_count, is_premium, last_reset) 
                    VALUES (?, 0, 0, ?)
                """, (user_id, current_month))
                conn.commit()
            
            conn.close()
            
            remaining = "Ilimitado" if is_premium else max(0, FREE_DOWNLOADS_LIMIT - downloads_count)
            
            return {
                "downloads_count": downloads_count,
                "is_premium": bool(is_premium),
                "remaining": remaining,
                "limit": FREE_DOWNLOADS_LIMIT
            }
        except sqlite3.Error as e:
            LOG.error("Erro ao obter estat√≠sticas de download: %s", e)
            return {"downloads_count": 0, "is_premium": False, "remaining": FREE_DOWNLOADS_LIMIT, "limit": FREE_DOWNLOADS_LIMIT}

def can_download(user_id: int) -> bool:
    """Verifica se o usu√°rio pode realizar um download"""
    stats = get_user_download_stats(user_id)
    
    if stats["is_premium"]:
        return True
    
    return stats["downloads_count"] < FREE_DOWNLOADS_LIMIT

def increment_download_count(user_id: int):
    """Incrementa o contador de downloads do usu√°rio"""
    with DB_LOCK:
        try:
            conn = sqlite3.connect(DB_FILE, timeout=10)
            c = conn.cursor()
            c.execute("UPDATE user_downloads SET downloads_count = downloads_count + 1 WHERE user_id=?", (user_id,))
            conn.commit()
            conn.close()
            LOG.info("Contador de downloads incrementado para usu√°rio %d", user_id)
        except sqlite3.Error as e:
            LOG.error("Erro ao incrementar contador de downloads: %s", e)

def get_monthly_users_count() -> int:
    """Retorna o n√∫mero de usu√°rios ativos no m√™s atual"""
    month = time.strftime("%Y-%m")
    with DB_LOCK:
        try:
            conn = sqlite3.connect(DB_FILE, timeout=10)
            c = conn.cursor()
            c.execute("SELECT COUNT(*) FROM monthly_users WHERE last_month=?", (month,))
            count = c.fetchone()[0]
            conn.close()
            return count
        except sqlite3.Error:
            return 0

# ============================
# PIX PAYMENT SYSTEM (Estrutura para implementa√ß√£o futura)
# ============================

def create_pix_payment(user_id: int, amount: float) -> str:
    """
    Cria um registro de pagamento PIX pendente
    
    TODO: Implementar integra√ß√£o com gateway de pagamento
    - Gerar QR Code PIX
    - Criar chave PIX √∫nica por transa√ß√£o
    - Retornar dados para exibi√ß√£o ao usu√°rio
    """
    with DB_LOCK:
        try:
            conn = sqlite3.connect(DB_FILE, timeout=10)
            c = conn.cursor()
            
            # Insere registro de pagamento pendente
            c.execute("""
                INSERT INTO pix_payments (user_id, amount, status) 
                VALUES (?, ?, 'pending')
            """, (user_id, amount))
            
            payment_id = c.lastrowid
            conn.commit()
            conn.close()
            
            LOG.info("Pagamento PIX criado: ID=%d, User=%d, Amount=%.2f", payment_id, user_id, amount)
            
            # TODO: Integrar com API de pagamento PIX
            # Exemplo: Mercado Pago, PagSeguro, etc.
            
            return f"PIX_{payment_id}_{user_id}"
        except sqlite3.Error as e:
            LOG.error("Erro ao criar pagamento PIX: %s", e)
            return None

def confirm_pix_payment(payment_reference: str, user_id: int):
    """
    Confirma um pagamento PIX e ativa o plano premium
    
    TODO: Implementar verifica√ß√£o autom√°tica de pagamento
    - Webhook do gateway de pagamento
    - Valida√ß√£o do comprovante
    - Ativa√ß√£o autom√°tica do premium
    """
    with DB_LOCK:
        try:
            conn = sqlite3.connect(DB_FILE, timeout=10)
            c = conn.cursor()
            
            # Atualiza status do pagamento
            c.execute("""
                UPDATE pix_payments 
                SET status='confirmed', confirmed_at=CURRENT_TIMESTAMP 
                WHERE user_id=? AND status='pending'
            """, (user_id,))
            
            # Ativa premium para o usu√°rio
            premium_expires = time.strftime("%Y-%m-%d", time.localtime(time.time() + 30*24*60*60))  # +30 dias
            c.execute("""
                UPDATE user_downloads 
                SET is_premium=1, premium_expires=? 
                WHERE user_id=?
            """, (premium_expires, user_id))
            
            conn.commit()
            conn.close()
            
            LOG.info("Pagamento PIX confirmado para usu√°rio %d", user_id)
            return True
        except sqlite3.Error as e:
            LOG.error("Erro ao confirmar pagamento PIX: %s", e)
            return False

# Inicializar banco de dados
init_db()

# ============================
# COOKIES - Sistema Multi-Plataforma
# ============================

def prepare_cookies_from_env(env_var="YT_COOKIES_B64"):
    """Prepara arquivo de cookies a partir de vari√°vel de ambiente Base64"""
    b64 = os.environ.get(env_var)
    if not b64:
        LOG.info("Vari√°vel %s n√£o encontrada.", env_var)
        return None
    
    try:
        raw = base64.b64decode(b64)
    except Exception as e:
        LOG.error("Falha ao decodificar %s: %s", env_var, e)
        return None

    try:
        fd, path = tempfile.mkstemp(prefix=f"{env_var.lower()}_", suffix=".txt")
        os.close(fd)
        with open(path, "wb") as f:
            f.write(raw)
        LOG.info("Cookies %s carregados em %s", env_var, path)
        return path
    except Exception as e:
        LOG.error("Falha ao gravar cookies %s: %s", env_var, e)
        return None

# Carrega cookies de diferentes plataformas
COOKIE_YT = prepare_cookies_from_env("YT_COOKIES_B64")
COOKIE_SHOPEE = prepare_cookies_from_env("SHOPEE_COOKIES_B64")
COOKIE_IG = prepare_cookies_from_env("IG_COOKIES_B64")

# ============================
# UTILITIES
# ============================

def is_valid_url(url: str) -> bool:
    """Valida se a string √© uma URL v√°lida"""
    try:
        result = urlparse(url)
        return all([result.scheme in ('http', 'https'), result.netloc])
    except Exception:
        return False

def get_cookie_for_url(url: str):
    """Retorna o arquivo de cookie apropriado baseado na URL"""
    url_lower = url.lower()
    
    if 'shopee' in url_lower:
        if COOKIE_SHOPEE:
            LOG.info("Usando cookies da Shopee")
            return COOKIE_SHOPEE
    elif 'instagram' in url_lower or 'insta' in url_lower:
        if COOKIE_IG:
            LOG.info("Usando cookies do Instagram")
            return COOKIE_IG
    elif 'youtube' in url_lower or 'youtu.be' in url_lower:
        if COOKIE_YT:
            LOG.info("Usando cookies do YouTube")
            return COOKIE_YT
    
    # Fallback para YouTube cookies
    if COOKIE_YT:
        LOG.info("Usando cookies do YouTube (fallback)")
        return COOKIE_YT
    elif COOKIE_SHOPEE:
        LOG.info("Usando cookies da Shopee (fallback)")
        return COOKIE_SHOPEE
    elif COOKIE_IG:
        LOG.info("Usando cookies do Instagram (fallback)")
        return COOKIE_IG
    
    LOG.info("Nenhum cookie dispon√≠vel")
    return None

def get_format_for_url(url: str) -> str:
    """Retorna o formato apropriado baseado na plataforma"""
    url_lower = url.lower()
    
    # Shopee: formato espec√≠fico para v√≠deos
    if 'shopee' in url_lower or 'shope.ee' in url_lower:
        LOG.info("üõçÔ∏è Formato Shopee: best video+audio ou best")
        return "best[ext=mp4]/best"
    
    # Instagram: usa formato simples sem especificar height
    elif 'instagram' in url_lower or 'insta' in url_lower:
        LOG.info("Formato Instagram: best (sem restri√ß√µes espec√≠ficas)")
        return "best"
    
    # YouTube: limita a 720p
    elif 'youtube' in url_lower or 'youtu.be' in url_lower:
        LOG.info("Formato YouTube: 720p m√°ximo")
        return "best[height<=720]/best"
    
    # Outras plataformas: formato padr√£o flex√≠vel
    else:
        LOG.info("Formato padr√£o: best com fallback")
        return "best/bestvideo+bestaudio"

def resolve_shopee_universal_link(url: str) -> str:
    """Resolve universal links da Shopee para URL real"""
    try:
        # Detecta se √© universal-link
        if 'universal-link' not in url:
            return url
        
        # M√©todo 1: Extrai do par√¢metro redir
        if 'redir=' in url:
            parsed = urlparse(url)
            params = parse_qs(parsed.query)
            if 'redir' in params:
                redir = unquote(params['redir'][0])
                LOG.info("üîó Universal link resolvido: %s", redir[:80])
                return redir
        
        # M√©todo 2: Tenta seguir redirect HTTP
        try:
            import requests
            response = requests.head(url, allow_redirects=True, timeout=5)
            if response.url != url:
                LOG.info("üîó Redirect HTTP seguido: %s", response.url[:80])
                return response.url
        except:
            pass
        
        LOG.warning("‚ö†Ô∏è N√£o foi poss√≠vel resolver universal-link")
        return url
        
    except Exception as e:
        LOG.error("Erro ao resolver universal link: %s", e)
        return url


def expand_short_url(url: str) -> str:
    """
    Expande links encurtados da Shopee (br.shp.ee, shope.ee)
    
    Retorna a URL expandida ou None se falhar
    """
    try:
        if not REQUESTS_AVAILABLE:
            LOG.warning("‚ö†Ô∏è requests n√£o dispon√≠vel para expandir link")
            return None
        
        import requests
        
        LOG.info("üîó Expandindo link encurtado: %s", url[:50])
        
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            'Accept-Language': 'pt-BR,pt;q=0.9,en;q=0.8',
        }
        
        # Tenta seguir redirects
        response = requests.get(url, headers=headers, allow_redirects=True, timeout=10)
        
        if response.url != url:
            LOG.info("‚úÖ Link expandido: %s", response.url[:80])
            return response.url
        else:
            LOG.warning("‚ö†Ô∏è Link n√£o redirecionou")
            return None
            
    except requests.exceptions.RequestException as e:
        LOG.error("‚ùå Erro ao expandir link: %s", e)
        return None
    except Exception as e:
        LOG.error("‚ùå Erro inesperado ao expandir link: %s", e)
        return None


def extract_shopee_video_direct(url: str) -> dict:
    """
    Extrai informa√ß√µes de v√≠deo da Shopee diretamente da p√°gina.
    Usado quando yt-dlp n√£o suporta o formato.
    """
    try:
        import requests
        import re
        import json
        
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Referer': 'https://shopee.com.br/',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        }
        
        LOG.info("üõçÔ∏è Tentando extra√ß√£o direta da Shopee...")
        response = requests.get(url, headers=headers, timeout=10)
        html = response.text
        
        # Procura por URLs de v√≠deo no HTML/JavaScript
        video_patterns = [
            r'"video_url"\s*:\s*"([^"]+)"',
            r'"url"\s*:\s*"(https://[^"]*\.mp4[^"]*)"',
            r'https://cf\.shopee\.com\.br/file/[a-zA-Z0-9]+',
            r'https://[^"\']*shopee[^"\']*\.mp4[^"\']*',
        ]
        
        video_url = None
        for pattern in video_patterns:
            matches = re.findall(pattern, html)
            if matches:
                video_url = matches[0].replace('\\/', '/')
                LOG.info("‚úÖ URL de v√≠deo encontrada: %s", video_url[:80])
                break
        
        if video_url:
            return {
                'url': video_url,
                'title': 'V√≠deo da Shopee',
                'ext': 'mp4',
                'direct': True  # Marca como extra√ß√£o direta
            }
        
        LOG.warning("‚ö†Ô∏è Nenhuma URL de v√≠deo encontrada na p√°gina")
        return None
        
    except Exception as e:
        LOG.error("Erro na extra√ß√£o direta: %s", e)
        return None

def format_duration(seconds: int) -> str:
    """Formata dura√ß√£o em segundos para formato leg√≠vel"""
    if not seconds:
        return "N/A"
    
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    secs = seconds % 60
    
    if hours > 0:
        return f"{hours}h {minutes}m {secs}s"
    elif minutes > 0:
        return f"{minutes}m {secs}s"
    else:
        return f"{secs}s"

def format_filesize(bytes_size: int) -> str:
    """Formata tamanho de arquivo em bytes para formato leg√≠vel"""
    if not bytes_size:
        return "N/A"
    
    for unit in ['B', 'KB', 'MB', 'GB']:
        if bytes_size < 1024.0:
            return f"{bytes_size:.1f} {unit}"
        bytes_size /= 1024.0
    
    return f"{bytes_size:.1f} TB"

async def _download_shopee_video(url: str, tmpdir: str, chat_id: int, pm: dict):
    """Download especial para Shopee Video usando web scraping"""
    if not REQUESTS_AVAILABLE:
        await application.bot.edit_message_text(
            text="‚ö†Ô∏è Extrator Shopee n√£o dispon√≠vel. Instale: pip install requests beautifulsoup4",
            chat_id=pm["chat_id"],
            message_id=pm["message_id"]
        )
        return
    
    try:
        # Atualiza mensagem
        await application.bot.edit_message_text(
            text="üõçÔ∏è Extraindo v√≠deo da Shopee...",
            chat_id=pm["chat_id"],
            message_id=pm["message_id"]
        )
        
        LOG.info("Iniciando extra√ß√£o customizada da Shopee: %s", url)
        
        # Faz requisi√ß√£o √† p√°gina
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
            "Accept-Language": "pt-BR,pt;q=0.9,en-US;q=0.8,en;q=0.7",
            "Referer": "https://shopee.com.br/",
        }
        
        # Carrega cookies se dispon√≠vel
        cookies_dict = {}
        if COOKIE_SHOPEE:
            try:
                with open(COOKIE_SHOPEE, 'r') as f:
                    for line in f:
                        if not line.startswith('#') and line.strip():
                            parts = line.strip().split('\t')
                            if len(parts) >= 7:
                                cookies_dict[parts[5]] = parts[6]
                LOG.info("Cookies da Shopee carregados: %d cookies", len(cookies_dict))
            except Exception as e:
                LOG.warning("Erro ao carregar cookies: %s", e)
        
        response = await asyncio.to_thread(
            lambda: requests.get(url, headers=headers, cookies=cookies_dict, timeout=30)
        )
        response.raise_for_status()
        
        LOG.info("P√°gina da Shopee carregada, analisando...")
        
        # Busca URL do v√≠deo no HTML/JavaScript
        video_url = None
        
        # Padr√£o 1: Busca em tags <script> com JSON
        import json
        patterns = [
            # Padr√µes originais
            r'"videoUrl"\s*:\s*"([^"]+)"',
            r'"video_url"\s*:\s*"([^"]+)"',
            r'"playAddr"\s*:\s*"([^"]+)"',
            r'"url"\s*:\s*"(https://[^"]*\.mp4[^"]*)"',
            r'playAddr["\']:\s*["\']([^"\']+)',
            r'"playUrl"\s*:\s*"([^"]+)"',
            # Novos padr√µes para Shopee
            r'"video"\s*:\s*{\s*"url"\s*:\s*"([^"]+)"',
            r'"stream"\s*:\s*"([^"]+)"',
            r'"source"\s*:\s*"([^"]+)"',
            r'videoUrl:\s*["\']([^"\']+)',
            r'src:\s*["\']([^"\']+\.mp4[^"\']*)',
            # Padr√µes para dados em window/global
            r'window\.__INITIAL_STATE__.*?"video".*?"url"\s*:\s*"([^"]+)"',
            r'window\.videoData.*?"url"\s*:\s*"([^"]+)"',
            # Padr√µes para URLs diretas de CDN
            r'(https://[^"\s]*shopee[^"\s]*\.mp4[^"\s]*)',
            r'(https://[^"\s]*vod[^"\s]*\.mp4[^"\s]*)',
            r'(https://[^"\s]*video[^"\s]*\.mp4[^"\s]*)',
        ]
        
        for pattern in patterns:
            matches = re.findall(pattern, response.text)
            for match in matches:
                # Limpa a URL
                clean_url = match.replace('\\/', '/').replace('\\', '')
                if 'http' in clean_url and ('mp4' in clean_url.lower() or 'video' in clean_url.lower()):
                    video_url = clean_url
                    LOG.info("URL de v√≠deo encontrada via regex: %s", video_url[:100])
                    break
            if video_url:
                break
        
        # Padr√£o 2: Busca em meta tags
        if not video_url:
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # Busca em scripts tipo application/json ou application/ld+json
            scripts = soup.find_all('script', type=['application/json', 'application/ld+json'])
            for script in scripts:
                if script.string:
                    try:
                        data = json.loads(script.string)
                        # Busca recursivamente no JSON
                        def find_video_url_in_dict(obj, depth=0):
                            if depth > 10:
                                return None
                            if isinstance(obj, dict):
                                for key, value in obj.items():
                                    if key in ['videoUrl', 'video_url', 'playAddr', 'playUrl', 'url', 'src', 'source']:
                                        if isinstance(value, str) and ('http' in value or value.endswith('.mp4')):
                                            return value
                                    result = find_video_url_in_dict(value, depth + 1)
                                    if result:
                                        return result
                            elif isinstance(obj, list):
                                for item in obj:
                                    result = find_video_url_in_dict(item, depth + 1)
                                    if result:
                                        return result
                            return None
                        
                        found_url = find_video_url_in_dict(data)
                        if found_url:
                            video_url = found_url
                            LOG.info("URL encontrada em script JSON: %s", video_url[:100])
                            break
                    except:
                        pass
            
            # Meta tags
            if not video_url:
                meta_tags = [
                    soup.find('meta', property='og:video'),
                    soup.find('meta', property='og:video:url'),
                    soup.find('meta', property='og:video:secure_url'),
                    soup.find('meta', attrs={'name': 'twitter:player:stream'}),
                ]
                
                for tag in meta_tags:
                    if tag and tag.get('content'):
                        video_url = tag.get('content')
                        LOG.info("URL de v√≠deo encontrada via meta tag: %s", video_url[:100])
                        break
        
        # Padr√£o 3: Busca em tags <video> ou <source>
        if not video_url:
            soup = BeautifulSoup(response.content, 'html.parser')
            video_tag = soup.find('video')
            if video_tag:
                video_url = video_tag.get('src') or video_tag.get('data-src')
            
            if not video_url:
                source_tags = soup.find_all('source')
                for source in source_tags:
                    src = source.get('src') or source.get('data-src')
                    if src and ('mp4' in src.lower() or 'video' in src.lower()):
                        video_url = src
                        break
        
        if not video_url:
            LOG.error("Nenhuma URL de v√≠deo encontrada na p√°gina da Shopee")
            await application.bot.edit_message_text(
                text="‚ö†Ô∏è <b>N√£o consegui encontrar o v√≠deo</b>\n\n"
                     "Poss√≠veis causas:\n"
                     "‚Ä¢ O link pode estar incorreto\n"
                     "‚Ä¢ O v√≠deo pode ter sido removido\n"
                     "‚Ä¢ A Shopee mudou a estrutura do site\n\n"
                     "Tente baixar pelo app oficial da Shopee.",
                chat_id=pm["chat_id"],
                message_id=pm["message_id"],
                parse_mode="HTML"
            )
            return
        
        # Ajusta URL se necess√°rio
        if not video_url.startswith('http'):
            video_url = 'https:' + video_url if video_url.startswith('//') else 'https://sv.shopee.com.br' + video_url
        
        LOG.info("Baixando v√≠deo da URL: %s", video_url[:100])
        
        # Atualiza mensagem
        await application.bot.edit_message_text(
            text="üì• Baixando v√≠deo da Shopee...",
            chat_id=pm["chat_id"],
            message_id=pm["message_id"]
        )
        
        # Baixa o v√≠deo
        output_path = os.path.join(tmpdir, "shopee_video.mp4")
        
        video_response = await asyncio.to_thread(
            lambda: requests.get(video_url, headers=headers, cookies=cookies_dict, stream=True, timeout=120)
        )
        video_response.raise_for_status()
        
        total_size = int(video_response.headers.get('content-length', 0))
        
        # Verifica tamanho antes de baixar
        if total_size > MAX_FILE_SIZE:
            LOG.warning("V√≠deo da Shopee excede 50 MB: %d bytes", total_size)
            await application.bot.edit_message_text(
                text=MESSAGES["file_too_large"],
                chat_id=pm["chat_id"],
                message_id=pm["message_id"],
                parse_mode="HTML"
            )
            return
        
        downloaded = 0
        last_percent = -1
        
        with open(output_path, 'wb') as f:
            for chunk in video_response.iter_content(chunk_size=8192):
                if chunk:
                    f.write(chunk)
                    downloaded += len(chunk)
                    
                    if total_size:
                        percent = int(downloaded * 100 / total_size)
                        if percent != last_percent and percent % 10 == 0:
                            last_percent = percent
                            blocks = int(percent / 5)
                            bar = "‚ñà" * blocks + "‚ñë" * (20 - blocks)
                            try:
                                await application.bot.edit_message_text(
                                    text=f"üì• Shopee: {percent}%\n{bar}",
                                    chat_id=pm["chat_id"],
                                    message_id=pm["message_id"]
                                )
                            except:
                                pass
        
        LOG.info("V√≠deo da Shopee baixado com sucesso: %s", output_path)
        
        # Verifica se arquivo foi criado
        if not os.path.exists(output_path) or os.path.getsize(output_path) < 1000:
            raise Exception("Arquivo baixado est√° vazio ou corrompido")
        
        # Envia o v√≠deo
        await application.bot.edit_message_text(
            text="‚úÖ Download conclu√≠do, enviando...",
            chat_id=pm["chat_id"],
            message_id=pm["message_id"]
        )
        
        with open(output_path, "rb") as fh:
            await application.bot.send_video(chat_id=chat_id, video=fh, caption="üõçÔ∏è Shopee Video")
        
        # Mensagem de sucesso com contador
        stats = get_user_download_stats(pm["user_id"])
        success_text = MESSAGES["upload_complete"].format(
            remaining=stats["remaining"],
            total=stats["limit"] if not stats["is_premium"] else "‚àû"
        )
        
        await application.bot.edit_message_text(
            text=success_text,
            chat_id=pm["chat_id"],
            message_id=pm["message_id"]
        )
        
    except requests.exceptions.RequestException as e:
        LOG.exception("Erro de rede ao baixar da Shopee: %s", e)
        await application.bot.edit_message_text(
            text=MESSAGES["error_network"],
            chat_id=pm["chat_id"],
            message_id=pm["message_id"]
        )
    except Exception as e:
        LOG.exception("Erro no download Shopee customizado: %s", e)
        await application.bot.edit_message_text(
            text="‚ö†Ô∏è <b>Erro ao baixar v√≠deo da Shopee</b>\n\n"
                 "A Shopee pode ter prote√ß√µes especiais neste v√≠deo. "
                 "Tente baixar pelo app oficial.",
            chat_id=pm["chat_id"],
            message_id=pm["message_id"],
            parse_mode="HTML"
        )

def split_video_file(input_path: str, output_dir: str, segment_size: int = SPLIT_SIZE) -> list:
    """Divide arquivo de v√≠deo em partes menores"""
    os.makedirs(output_dir, exist_ok=True)
    
    file_size = os.path.getsize(input_path)
    num_parts = (file_size + segment_size - 1) // segment_size
    
    base_name = os.path.splitext(os.path.basename(input_path))[0]
    output_pattern = os.path.join(output_dir, f"{base_name}_part%03d.mp4")
    
    cmd = [
        "ffmpeg", "-i", input_path,
        "-c", "copy",
        "-map", "0",
        "-f", "segment",
        "-segment_time", "600",
        "-reset_timestamps", "1",
        output_pattern
    ]
    
    subprocess.run(cmd, check=True, capture_output=True)
    
    parts = sorted([
        os.path.join(output_dir, f) 
        for f in os.listdir(output_dir) 
        if f.startswith(base_name) and f.endswith('.mp4')
    ])
    
    return parts

# ============================
# TELEGRAM HANDLERS
# ============================

async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler para o comando /start"""
    user_id = update.effective_user.id
    update_user(user_id)
    
    welcome_text = MESSAGES["welcome"].format(free_limit=FREE_DOWNLOADS_LIMIT)
    await update.message.reply_text(welcome_text, parse_mode="HTML")
    LOG.info("Comando /start executado por usu√°rio %d", user_id)

async def stats_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler para o comando /stats (apenas admin)"""
    count = get_monthly_users_count()
    stats_text = MESSAGES["stats"].format(count=count)
    await update.message.reply_text(stats_text, parse_mode="HTML")
    LOG.info("Comando /stats executado")

async def status_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler para o comando /status - mostra saldo de downloads"""
    user_id = update.effective_user.id
    stats = get_user_download_stats(user_id)
    
    premium_info = "‚úÖ Plano: <b>Premium Ativo</b>" if stats["is_premium"] else "üì¶ Plano: <b>Gratuito</b>"
    
    status_text = MESSAGES["status"].format(
        user_id=user_id,
        used=stats["downloads_count"],
        total=stats["limit"] if not stats["is_premium"] else "‚àû",
        remaining=stats["remaining"],
        premium_info=premium_info
    )
    
    await update.message.reply_text(status_text, parse_mode="HTML")
    LOG.info("Comando /status executado por usu√°rio %d", user_id)

async def premium_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler para o comando /premium - informa√ß√µes sobre plano premium"""
    user_id = update.effective_user.id
    
    keyboard = [[
        InlineKeyboardButton("üí≥ Assinar Premium", callback_data=f"subscribe:{user_id}")
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        MESSAGES["premium_info"],
        parse_mode="HTML",
        reply_markup=reply_markup
    )
    LOG.info("Comando /premium executado por usu√°rio %d", user_id)

async def ai_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler para o comando /ai - conversar com IA"""
    if not groq_client:
        await update.message.reply_text(
            "ü§ñ <b>IA N√£o Dispon√≠vel</b>\n\n"
            "A intelig√™ncia artificial n√£o est√° configurada no momento.\n"
            "Entre em contato com o administrador.",
            parse_mode="HTML"
        )
        return
    
    # Se tem argumentos, responde direto
    if context.args:
        user_message = " ".join(context.args)
        await update.message.chat.send_action("typing")
        
        response = await chat_with_ai(
            user_message,
            system_prompt="""Voc√™ √© um assistente amig√°vel para um bot de downloads do Telegram.
- Seja √∫til, direto e use frases curtas.
- Utilize emojis apenas quando fizer sentido.
- Nunca invente informa√ß√µes. Se n√£o souber, responda exatamente: "N√£o tenho essa informa√ß√£o".
- N√£o forne√ßa detalhes que n√£o estejam listados abaixo.
- Se o usu√°rio quiser assinar o plano, pe√ßa para digitar /premium.
- Este bot n√£o faz download de m√∫sicas e n√£o permite escolher qualidade de v√≠deos.

Funcionalidades:
- Download de v√≠deos (YouTube, Instagram, TikTok, Twitter, etc.)
- Plano gratuito: 10 downloads/m√™s
- Plano premium: downloads ilimitados (R$9,90/m√™s)
- Se o usu√°rio falar para voc√™ baixar algum v√≠deo, incentive ele a te enviar um link
"""
        )
        
        if response:
            await update.message.reply_text(response, parse_mode="HTML")
        else:
            await update.message.reply_text(
                "‚ö†Ô∏è Erro ao processar sua mensagem. Tente novamente."
            )
    else:
        # Sem argumentos, mostra instru√ß√µes
        await update.message.reply_text(
            "ü§ñ <b>Assistente com IA</b>\n\n"
            "Converse comigo! Use:\n"
            "‚Ä¢ <code>/ai sua pergunta aqui</code>\n\n"
            "<b>Ou simplesmente envie uma mensagem de texto!</b>\n\n"
            "<i>Exemplos:</i>\n"
            "‚Ä¢ /ai como baixar v√≠deos?\n"
            "‚Ä¢ /ai o que √© o plano premium?\n"
            "‚Ä¢ /ai me recomende v√≠deos sobre M√∫sica",
            parse_mode="HTML"
        )
    
    LOG.info("Comando /ai executado por usu√°rio %d", update.effective_user.id)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler para mensagens de texto (URLs ou chat com IA)"""
    user_id = update.effective_user.id
    text = update.message.text.strip()
    
    update_user(user_id)
    
    # Verifica se √© um link v√°lido
    urls = URL_RE.findall(text)
    if not urls:
        # N√£o h√° URL - verifica se tem IA dispon√≠vel para chat
        if groq_client:
            # Analisa inten√ß√£o do usu√°rio
            intent_data = await analyze_user_intent(text)
            intent = intent_data.get('intent', 'chat')
            
            # Se for pedido de ajuda ou chat geral, responde com IA
            if intent in ['help', 'chat']:
                LOG.info("üí¨ Chat IA - Usu√°rio %d: %s", user_id, text[:50])
                await update.message.chat.send_action("typing")
                
                response = await chat_with_ai(
                    text,
                    system_prompt="""Voc√™ √© um assistente amig√°vel para um bot de downloads do Telegram.
- Seja √∫til, direto e use frases curtas.
- Utilize emojis apenas quando fizer sentido.
- Nunca invente informa√ß√µes. Se n√£o souber, responda exatamente: "N√£o tenho essa informa√ß√£o".
- N√£o forne√ßa detalhes que n√£o estejam listados abaixo.
- Se o usu√°rio quiser assinar o plano, pe√ßa para digitar /premium.
- Este bot n√£o faz download de m√∫sicas e n√£o permite escolher qualidade de v√≠deos.

Funcionalidades:
- Download de v√≠deos (YouTube, Instagram, TikTok, Twitter, etc.)
- Plano gratuito: 10 downloads/m√™s
- Plano premium: downloads ilimitados (R$9,90/m√™s)
- Se o usu√°rio falar para voc√™ baixar algum v√≠deo, incentive ele a te enviar um link

Comandos:
/start - Iniciar
/status - Ver estat√≠sticas
/premium - Plano premium 
"""
                )
                
                if response:
                    await update.message.reply_text(response)
                else:
                    await update.message.reply_text(
                        "‚ö†Ô∏è Desculpe, n√£o consegui processar sua mensagem.\n\n"
                        "üí° <b>Dica:</b> Para baixar v√≠deos, envie um link!\n"
                        "Use /ai para conversar comigo.",
                        parse_mode="HTML"
                    )
                return
        
        # Sem IA ou n√£o conseguiu processar - mostra mensagem padr√£o
        await update.message.reply_text(MESSAGES["url_prompt"])
        return
    
    url = urls[0]
    
    if not is_valid_url(url):
        await update.message.reply_text(MESSAGES["invalid_url"])
        return
    
    # Verifica limite de downloads
    if not can_download(user_id):
        await update.message.reply_text(
            MESSAGES["limit_reached"].format(limit=FREE_DOWNLOADS_LIMIT),
            parse_mode="HTML"
        )
        LOG.info("Usu√°rio %d atingiu limite de downloads", user_id)
        return
    
    # Cria token √∫nico para esta requisi√ß√£o
    token = str(uuid.uuid4())
    
    # üîó PASSO 1: Expande links encurtados (br.shp.ee, shope.ee)
    if 'shp.ee' in url.lower() or 'shope.ee' in url.lower():
        LOG.info("üîó Link encurtado detectado! Tentando expandir...")
        
        expanded = expand_short_url(url)
        
        if expanded:
            LOG.info("‚úÖ Link expandido com sucesso!")
            url = expanded
        else:
            # Se falhar, avisa o usu√°rio
            await update.message.reply_text(
                "üîó <b>Link Encurtado Detectado</b>\n\n"
                "‚ö†Ô∏è N√£o foi poss√≠vel expandir automaticamente.\n\n"
                "Por favor:\n"
                "1Ô∏è‚É£ Abra o link no navegador\n"
                "2Ô∏è‚É£ Copie a URL completa da p√°gina\n"
                "3Ô∏è‚É£ Envie novamente\n\n"
                "Exemplo: <code>https://shopee.com.br/product/123/456</code>",
                parse_mode="HTML"
            )
            LOG.warning("‚ùå N√£o foi poss√≠vel expandir link encurtado")
            return
    
    # üîó PASSO 2: Resolve links universais da Shopee
    if 'shopee' in url.lower():
        original_url = url
        url = resolve_shopee_universal_link(url)
        if url != original_url:
            LOG.info("‚úÖ URL resolvida com sucesso")
    
    # Envia mensagem de processamento
    processing_msg = await update.message.reply_text(MESSAGES["processing"])
    
    # Verifica se √© Shopee Video
    is_shopee_video = 'sv.shopee' in url.lower() or 'share-video' in url.lower()
    
    if is_shopee_video:
        # Para Shopee Video, criamos confirma√ß√£o simples sem informa√ß√µes detalhadas
        LOG.info("Detectado Shopee Video - confirma√ß√£o sem extra√ß√£o pr√©via")
        
        # Cria bot√µes de confirma√ß√£o
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ Confirmar", callback_data=f"dl:{token}"),
                InlineKeyboardButton("‚ùå Cancelar", callback_data=f"cancel:{token}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        confirm_text = (
            "üé¨ <b>Confirmar Download</b>\n\n"
            "üõçÔ∏è V√≠deo da Shopee\n"
            "‚ö†Ô∏è Informa√ß√µes dispon√≠veis apenas ap√≥s download\n\n"
            "‚úÖ Deseja prosseguir com o download?"
        )
        
        await processing_msg.edit_text(
            confirm_text,
            reply_markup=reply_markup,
            parse_mode="HTML"
        )
        
        # Armazena informa√ß√µes pendentes
        PENDING[token] = {
            "url": url,
            "user_id": user_id,
            "chat_id": update.effective_chat.id,
            "message_id": processing_msg.message_id,
            "timestamp": time.time(),
        }
        
        # Remove requisi√ß√µes antigas
        _cleanup_pending()
        return
    
    # Obt√©m informa√ß√µes do v√≠deo (para n√£o-Shopee)
    try:
        video_info = await get_video_info(url)
        
        if not video_info:
            await processing_msg.edit_text(MESSAGES["invalid_url"])
            return
        
        title = video_info.get("title", "V√≠deo")[:100]
        duration = format_duration(video_info.get("duration", 0))
        filesize_bytes = video_info.get("filesize") or video_info.get("filesize_approx", 0)
        filesize = format_filesize(filesize_bytes)
        
        # Verifica se o arquivo excede o limite de 50 MB
        if filesize_bytes and filesize_bytes > MAX_FILE_SIZE:
            await processing_msg.edit_text(MESSAGES["file_too_large"], parse_mode="HTML")
            LOG.info("V√≠deo rejeitado por exceder 50 MB: %d bytes", filesize_bytes)
            return
        
        # Cria bot√µes de confirma√ß√£o
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ Confirmar", callback_data=f"dl:{token}"),
                InlineKeyboardButton("‚ùå Cancelar", callback_data=f"cancel:{token}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        confirm_text = MESSAGES["confirm_download"].format(
            title=title,
            duration=duration,
            filesize=filesize
        )
        
        await processing_msg.edit_text(
            confirm_text,
            reply_markup=reply_markup,
            parse_mode="HTML"
        )
        
        # Armazena informa√ß√µes pendentes
        PENDING[token] = {
            "url": url,
            "user_id": user_id,
            "chat_id": update.effective_chat.id,
            "message_id": processing_msg.message_id,
            "timestamp": time.time(),
        }
        
        # Remove requisi√ß√µes antigas
        _cleanup_pending()
        
    except Exception as e:
        LOG.exception("Erro ao obter informa√ß√µes do v√≠deo: %s", e)
        await processing_msg.edit_text(MESSAGES["error_unknown"])

async def get_video_info(url: str) -> dict:
    """Obt√©m informa√ß√µes b√°sicas do v√≠deo sem fazer download"""
    cookie_file = get_cookie_for_url(url)
    
    # Configura√ß√£o especial para Shopee
    is_shopee = 'shopee' in url.lower() or 'shope.ee' in url.lower()
    
    # üîó CR√çTICO: Resolve universal-links ANTES de tudo!
    if is_shopee and 'universal-link' in url:
        original_url = url
        url = resolve_shopee_universal_link(url)
        LOG.info("üîó Universal link resolvido: %s", url[:80])
        # Atualiza flag is_shopee ap√≥s resolver
        is_shopee = 'shopee' in url.lower() or 'shope.ee' in url.lower()
    
    # üéØ NOVO: Se for Shopee, tenta API primeiro (SEM marca d'√°gua!)
    if is_shopee:
        LOG.info("üõçÔ∏è Detectado Shopee - tentando API interna (sem marca d'√°gua)...")
        shopee_video = await asyncio.to_thread(SHOPEE_EXTRACTOR.get_video, url)
        
        if shopee_video and shopee_video.get('url'):
            LOG.info("‚úÖ V√≠deo extra√≠do da API Shopee SEM marca d'√°gua!")
            return {
                'url': shopee_video['url'],
                'title': shopee_video.get('title', 'V√≠deo da Shopee'),
                'uploader': shopee_video.get('uploader', 'Desconhecido'),
                'ext': 'mp4',
                'from_shopee_api': True,  # Marca que veio da API
            }
        else:
            LOG.warning("‚ö†Ô∏è API Shopee falhou, tentando yt-dlp...")
    
    ydl_opts = {
        "quiet": True,
        "no_warnings": True,
        "extract_flat": False,
        "no_check_certificate": True,
        "prefer_insecure": True,
    }
    
    if is_shopee:
        # Configura√ß√µes espec√≠ficas para Shopee
        ydl_opts.update({
            "http_headers": {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
                "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
                "Accept-Language": "pt-BR,pt;q=0.9,en;q=0.8",
                "Referer": "https://shopee.com.br/",
                "Origin": "https://shopee.com.br",
            },
            "socket_timeout": 30,
            "retries": 3,
        })
        LOG.info("üõçÔ∏è Configura√ß√µes especiais para Shopee aplicadas")
    
    if cookie_file:
        ydl_opts["cookiefile"] = cookie_file
    
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = await asyncio.to_thread(ydl.extract_info, url, download=False)
            return info
    except Exception as e:
        LOG.error("Erro ao extrair informa√ß√µes com yt-dlp: %s", e)
        
        # Se for Shopee e yt-dlp falhou, tenta extra√ß√£o direta
        if is_shopee:
            LOG.info("üõçÔ∏è Tentando extra√ß√£o direta da Shopee como fallback...")
            direct_info = extract_shopee_video_direct(url)
            if direct_info:
                LOG.info("‚úÖ Extra√ß√£o direta bem-sucedida!")
                return direct_info
        
        return None

# ====================================================================
# FUN√á√ïES DE INTELIG√äNCIA ARTIFICIAL (GROQ)
# ====================================================================

async def chat_with_ai(message: str, system_prompt: str = None) -> str:
    """
    Envia mensagem para Groq AI e retorna resposta.
    
    Args:
        message: Mensagem do usu√°rio
        system_prompt: Instru√ß√µes do sistema (opcional)
        
    Returns:
        str: Resposta da IA
    """
    if not groq_client:
        return None
    
    try:
        messages = []
        
        # Adiciona prompt do sistema se fornecido
        if system_prompt:
            messages.append({
                "role": "system",
                "content": system_prompt
            })
        
        # Adiciona mensagem do usu√°rio
        messages.append({
            "role": "user",
            "content": message
        })
        
        # Chama API do Groq
        response = groq_client.chat.completions.create(
            model="llama-3.1-8b-instant",
            messages=messages,
            temperature=0.7,
            max_tokens=1024
        )
        
        return response.choices[0].message.content
        
    except Exception as e:
        LOG.error("Erro ao chamar Groq AI: %s", e)
        return None


async def generate_video_summary(video_info: dict) -> str:
    """
    Gera resumo inteligente de um v√≠deo usando IA.
    
    Args:
        video_info: Dicion√°rio com informa√ß√µes do v√≠deo
        
    Returns:
        str: Resumo do v√≠deo ou string vazia se IA indispon√≠vel
    """
    if not groq_client:
        return ""
    
    try:
        title = video_info.get('title', 'N/A')
        description = video_info.get('description', '')
        
        # Limita descri√ß√£o para n√£o exceder tokens
        if description and len(description) > 500:
            description = description[:500] + "..."
        
        prompt = f"""Crie um resumo CURTO e OBJETIVO deste v√≠deo em 3-4 pontos principais.
Use bullets (‚Ä¢) e seja direto.

T√≠tulo: {title}
Descri√ß√£o: {description or 'Sem descri√ß√£o'}

Responda APENAS com o resumo, sem introdu√ß√µes."""
        
        summary = await chat_with_ai(
            prompt,
            system_prompt="Voc√™ √© um assistente que resume v√≠deos de forma clara e concisa."
        )
        
        return summary if summary else ""
        
    except Exception as e:
        LOG.error("Erro ao gerar resumo: %s", e)
        return ""


async def analyze_user_intent(message: str) -> dict:
    """
    Analisa a inten√ß√£o do usu√°rio na mensagem.
    
    Args:
        message: Mensagem do usu√°rio
        
    Returns:
        dict: {'intent': 'download' | 'chat' | 'help', 'confidence': 0.0-1.0}
    """
    # Fallback simples sem IA
    if URL_RE.search(message):
        return {'intent': 'download', 'confidence': 1.0}
    
    if not groq_client:
        return {'intent': 'chat', 'confidence': 0.5}
    
    try:
        prompt = f"""Analise esta mensagem de usu√°rio e identifique a inten√ß√£o:
"{message}"

Responda APENAS com uma das op√ß√µes:
- download: se pede para baixar algo ou tem URL
- help: se pede ajuda, instru√ß√µes ou explica√ß√µes
- chat: conversa geral

Responda APENAS uma palavra."""
        
        response = await chat_with_ai(
            prompt,
            system_prompt="Voc√™ analisa inten√ß√µes de usu√°rios. Responda apenas: download, help ou chat."
        )
        
        if response:
            intent = response.strip().lower()
            if intent in ['download', 'help', 'chat']:
                return {'intent': intent, 'confidence': 0.9}
        
    except Exception as e:
        LOG.error("Erro ao analisar inten√ß√£o: %s", e)
    
    return {'intent': 'chat', 'confidence': 0.5}


# ====================================================================
# FUN√á√ïES DO MERCADO PAGO
# ====================================================================

async def callback_buy_premium(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler para compra de premium via Mercado Pago PIX"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    username = query.from_user.first_name or f"User{user_id}"
    
    LOG.info("üõí Usu√°rio %d iniciou compra de premium", user_id)
    
    # Verifica se j√° √© premium
    stats = get_user_download_stats(user_id)
    if stats["is_premium"]:
        await query.edit_message_text(
            "üíé <b>Voc√™ j√° √© Premium!</b>\n\n"
            "Continue aproveitando seus benef√≠cios ilimitados! üéâ",
            parse_mode="HTML"
        )
        LOG.info("Usu√°rio %d j√° √© premium", user_id)
        return
    
    # Verifica se Mercado Pago est√° dispon√≠vel
    if not MERCADOPAGO_AVAILABLE or not MERCADOPAGO_ACCESS_TOKEN:
        await query.edit_message_text(
            "‚ùå <b>Sistema de Pagamento Indispon√≠vel</b>\n\n"
            "O sistema de pagamento est√° temporariamente indispon√≠vel.\n"
            "Por favor, tente novamente mais tarde ou contate o suporte.",
            parse_mode="HTML"
        )
        LOG.error("Tentativa de compra mas Mercado Pago n√£o configurado")
        return
    
    # Mostra mensagem de processamento
    await query.edit_message_text(
        "‚è≥ <b>Gerando pagamento PIX...</b>\n\nAguarde um momento.",
        parse_mode="HTML"
    )
    
    try:
        LOG.info("Inicializando SDK do Mercado Pago")
        sdk = mercadopago.SDK(MERCADOPAGO_ACCESS_TOKEN)
        
        # Prepara dados do pagamento
        payment_data = {
            "transaction_amount": float(PREMIUM_PRICE),
            "description": f"Plano Premium - Bot Downloads (User ID: {user_id})",
            "payment_method_id": "pix",
            "payer": {
                "email": f"user{user_id}@telegram.bot",
                "first_name": username,
                "last_name": "Telegram"
            },
            "external_reference": f"PIX_{user_id}_{int(time.time())}",
            "metadata": {
                "user_id": user_id,
                "plan": "premium",
                "duration_days": PREMIUM_DURATION_DAYS
            }
        }
        
        # Adiciona notification_url se tiver RENDER_EXTERNAL_URL
        render_url = os.getenv("RENDER_EXTERNAL_URL")
        if render_url:
            payment_data["notification_url"] = f"{render_url}/webhook/pix"
            LOG.info("Notification URL configurada: %s/webhook/pix", render_url)
        
        LOG.info("Criando pagamento PIX para usu√°rio %d - Valor: R$ %.2f", user_id, PREMIUM_PRICE)
        
        # Cria o pagamento
        payment_response = sdk.payment().create(payment_data)
        
        LOG.info("Resposta do Mercado Pago - Status: %s", payment_response.get("status"))
        
        # Valida resposta
        if payment_response["status"] != 201:
            LOG.error("Erro ao criar pagamento - Status %s: %s", 
                     payment_response.get("status"), payment_response)
            raise Exception(f"Mercado Pago retornou erro: status {payment_response.get('status')}")
        
        payment = payment_response["response"]
        payment_id = payment.get("id")
        
        LOG.info("‚úÖ Payment criado - ID: %s, Status: %s", payment_id, payment.get("status"))
        
        # Valida estrutura do PIX
        if "point_of_interaction" not in payment:
            LOG.error("Resposta sem point_of_interaction: %s", payment)
            raise Exception("PIX n√£o foi gerado - point_of_interaction ausente")
        
        poi = payment["point_of_interaction"]
        if "transaction_data" not in poi:
            LOG.error("point_of_interaction sem transaction_data: %s", poi)
            raise Exception("PIX n√£o foi gerado - transaction_data ausente")
        
        td = poi["transaction_data"]
        if "qr_code" not in td or "qr_code_base64" not in td:
            LOG.error("transaction_data sem QR codes: %s", td)
            raise Exception("PIX n√£o foi gerado - QR codes ausentes")
        
        # Extrai informa√ß√µes do PIX
        pix_info = {
            "payment_id": payment_id,
            "qr_code": td["qr_code"],
            "qr_code_base64": td["qr_code_base64"],
            "amount": payment["transaction_amount"]
        }
        
        LOG.info("‚úÖ PIX gerado com sucesso - ID: %s", payment_id)
        
        # Salva no banco de dados
        try:
            with DB_LOCK:
                conn = sqlite3.connect(DB_FILE, timeout=10)
                c = conn.cursor()
                c.execute("""
                    INSERT INTO pix_payments (user_id, amount, pix_key, status) 
                    VALUES (?, ?, ?, 'pending')
                """, (user_id, pix_info["amount"], payment_id))
                conn.commit()
                conn.close()
            LOG.info("Pagamento salvo no banco de dados")
        except Exception as e:
            LOG.error("Erro ao salvar pagamento no banco: %s", e)
            # Continua mesmo se falhar ao salvar no banco
        
        # Prepara mensagem
        message_text = (
            "üí≥ <b>Pagamento PIX Gerado</b>\n\n"
            f"üí∞ Valor: R$ {pix_info['amount']:.2f}\n"
            f"üÜî ID: <code>{payment_id}</code>\n\n"
            "üì± <b>Como pagar:</b>\n"
            "1Ô∏è‚É£ Abra o app do seu banco\n"
            "2Ô∏è‚É£ V√° em PIX ‚Üí Ler QR Code\n"
            "3Ô∏è‚É£ Escaneie o c√≥digo abaixo\n"
            "4Ô∏è‚É£ Confirme o pagamento\n\n"
            "‚è±Ô∏è <b>Expira em:</b> 30 minutos\n"
            "‚úÖ <b>Ativa√ß√£o autom√°tica ap√≥s confirma√ß√£o!</b>\n\n"
            "‚ö° Seu premium ser√° ativado em at√© 60 segundos."
        )
        
        # Tenta enviar QR Code como imagem
        qr_sent = False
        if PIL_AVAILABLE:
            try:
                LOG.info("Tentando enviar QR Code como imagem")
                
                # Decodifica QR Code
                qr_bytes = base64.b64decode(pix_info["qr_code_base64"])
                qr_image = Image.open(io.BytesIO(qr_bytes))
                
                # Salva temporariamente
                qr_path = f"/tmp/qr_{user_id}_{int(time.time())}.png"
                qr_image.save(qr_path)
                
                # Envia imagem
                with open(qr_path, "rb") as photo:
                    await query.message.reply_photo(
                        photo=photo,
                        caption=message_text,
                        parse_mode="HTML"
                    )
                
                # Remove arquivo tempor√°rio
                os.remove(qr_path)
                qr_sent = True
                LOG.info("‚úÖ QR Code enviado como imagem")
                
            except Exception as e:
                LOG.error("Erro ao enviar QR Code como imagem: %s", e)
        
        # Se enviou imagem, envia c√≥digo separado; sen√£o envia tudo junto
        if qr_sent:
            # Envia c√≥digo PIX copia e cola em mensagem separada
            LOG.info("Enviando c√≥digo PIX copia e cola em mensagem separada")
            await query.message.reply_text(
                "üìã <b>C√≥digo PIX Copia e Cola:</b>\n\n"
                "Caso prefira, copie o c√≥digo abaixo e cole no seu app de pagamento:\n\n"
                f"<code>{pix_info['qr_code']}</code>\n\n"
                "üí° <i>Clique no c√≥digo acima para copiar automaticamente</i>",
                parse_mode="HTML"
            )
        else:
            # Fallback: envia tudo como texto
            LOG.info("Enviando QR Code como texto (c√≥digo copia e cola)")
            await query.message.reply_text(
                message_text + f"\n\nüìã <b>C√≥digo PIX Copia e Cola:</b>\n<code>{pix_info['qr_code']}</code>",
                parse_mode="HTML"
            )
        
        # Deleta mensagem antiga
        try:
            await query.message.delete()
        except Exception as e:
            LOG.debug("N√£o foi poss√≠vel deletar mensagem antiga: %s", e)
        
        # Inicia monitoramento do pagamento
        LOG.info("Iniciando monitoramento do pagamento %s", payment_id)
        asyncio.create_task(monitor_payment_status(user_id, payment_id))
        
        LOG.info("‚úÖ Processo completo - Pagamento %s criado e em monitoramento", payment_id)
        
    except Exception as e:
        LOG.exception("‚ùå ERRO ao gerar pagamento PIX: %s", e)
        
        # Determina mensagem de erro espec√≠fica
        error_msg = str(e).lower()
        if "401" in error_msg or "unauthorized" in error_msg:
            error_detail = "Token do Mercado Pago inv√°lido ou expirado."
        elif "point_of_interaction" in error_msg or "qr" in error_msg:
            error_detail = "Erro ao gerar QR Code PIX. Verifique as credenciais."
        elif "mercadopago_access_token" in error_msg:
            error_detail = "Sistema de pagamento n√£o configurado no servidor."
        else:
            error_detail = f"Erro ao processar pagamento."
        
        await query.edit_message_text(
            f"‚ùå <b>Erro ao Gerar Pagamento</b>\n\n"
            f"{error_detail}\n\n"
            f"Por favor, tente novamente em alguns instantes.\n\n"
            f"Se o erro persistir, entre em contato com o suporte.",
            parse_mode="HTML"
        )


async def monitor_payment_status(user_id: int, payment_id: str):
    """Monitora o status do pagamento em segundo plano"""
    if not MERCADOPAGO_AVAILABLE or not MERCADOPAGO_ACCESS_TOKEN:
        LOG.error("N√£o √© poss√≠vel monitorar pagamento - Mercado Pago n√£o configurado")
        return
    
    try:
        sdk = mercadopago.SDK(MERCADOPAGO_ACCESS_TOKEN)
        max_attempts = 60  # 30 minutos (30s * 60)
        
        LOG.info("üîç Monitorando pagamento %s (max %d tentativas)", payment_id, max_attempts)
        
        for attempt in range(max_attempts):
            await asyncio.sleep(30)  # Verifica a cada 30 segundos
            
            try:
                payment_response = sdk.payment().get(payment_id)
                
                if payment_response["status"] != 200:
                    LOG.warning("Erro ao consultar pagamento %s: status %s", 
                              payment_id, payment_response.get("status"))
                    continue
                
                payment = payment_response["response"]
                status = payment["status"]
                
                LOG.debug("Pagamento %s - Status: %s (tentativa %d/%d)", 
                         payment_id, status, attempt + 1, max_attempts)
                
                if status == "approved":
                    # Pagamento aprovado!
                    LOG.info("üéâ Pagamento %s APROVADO!", payment_id)
                    await activate_premium(user_id, payment_id)
                    break
                    
                elif status in ["rejected", "cancelled", "refunded"]:
                    LOG.info("‚ö†Ô∏è Pagamento %s n√£o conclu√≠do: %s", payment_id, status)
                    
                    # Notifica usu√°rio
                    try:
                        status_messages = {
                            "rejected": "rejeitado",
                            "cancelled": "cancelado",
                            "refunded": "reembolsado"
                        }
                        await application.bot.send_message(
                            chat_id=user_id,
                            text=(
                                f"‚ö†Ô∏è <b>Pagamento {status_messages.get(status, status)}</b>\n\n"
                                f"ID: <code>{payment_id}</code>\n\n"
                                "Seu pagamento n√£o foi conclu√≠do.\n"
                                "Se precisar de ajuda, entre em contato com o suporte."
                            ),
                            parse_mode="HTML"
                        )
                    except Exception as e:
                        LOG.error("Erro ao notificar usu√°rio sobre falha: %s", e)
                    break
                    
            except Exception as e:
                LOG.error("Erro ao verificar status do pagamento %s: %s", payment_id, e)
        
        if attempt >= max_attempts - 1:
            LOG.info("‚è∞ Timeout de monitoramento para pagamento %s ap√≥s %d minutos", 
                    payment_id, (max_attempts * 30) // 60)
            
    except Exception as e:
        LOG.exception("Erro cr√≠tico no monitoramento do pagamento %s: %s", payment_id, e)


async def activate_premium(user_id: int, payment_id: str):
    """Ativa o plano premium para o usu√°rio"""
    try:
        LOG.info("üîì Ativando premium para usu√°rio %d - Pagamento: %s", user_id, payment_id)
        
        # Calcula data de expira√ß√£o
        premium_expires = (datetime.now() + timedelta(days=PREMIUM_DURATION_DAYS)).strftime("%Y-%m-%d")
        
        # Atualiza banco de dados
        with DB_LOCK:
            conn = sqlite3.connect(DB_FILE, timeout=10)
            c = conn.cursor()
            
            # Ativa premium
            c.execute("""
                UPDATE user_downloads 
                SET is_premium=1, premium_expires=? 
                WHERE user_id=?
            """, (premium_expires, user_id))
            
            # Atualiza status do pagamento
            c.execute("""
                UPDATE pix_payments 
                SET status='confirmed', confirmed_at=CURRENT_TIMESTAMP 
                WHERE user_id=? AND pix_key=?
            """, (user_id, payment_id))
            
            rows_affected = c.rowcount
            conn.commit()
            conn.close()
        
        LOG.info("‚úÖ Premium ativado no banco de dados (%d linhas atualizadas)", rows_affected)
        
        # Notifica o usu√°rio
        await application.bot.send_message(
            chat_id=user_id,
            text=(
                "üéâ <b>Pagamento Confirmado!</b>\n\n"
                f"‚úÖ Plano Premium ativado com sucesso!\n"
                f"üÜî Pagamento: <code>{payment_id}</code>\n"
                f"üìÖ V√°lido at√©: <b>{premium_expires}</b>\n\n"
                "üíé <b>Benef√≠cios liberados:</b>\n"
                "‚Ä¢ ‚ôæÔ∏è Downloads ilimitados\n"
                "‚Ä¢ üé¨ Qualidade m√°xima (at√© 1080p)\n"
                "‚Ä¢ ‚ö° Processamento priorit√°rio\n"
                "‚Ä¢ üéß Suporte dedicado\n\n"
                "Obrigado pela confian√ßa! üôè\n\n"
                "Use /status para ver suas informa√ß√µes."
            ),
            parse_mode="HTML"
        )
        
        LOG.info("‚úÖ Usu√°rio %d notificado sobre ativa√ß√£o do premium", user_id)
        
    except Exception as e:
        LOG.exception("‚ùå ERRO ao ativar premium para usu√°rio %d: %s", user_id, e)
        
        # Tenta notificar sobre o erro
        try:
            await application.bot.send_message(
                chat_id=user_id,
                text=(
                    "‚ö†Ô∏è <b>Pagamento Recebido</b>\n\n"
                    "Recebemos seu pagamento mas houve um erro ao ativar seu premium automaticamente.\n\n"
                    "Por favor, entre em contato com o suporte informando este ID:\n"
                    f"<code>{payment_id}</code>\n\n"
                    "Resolveremos em breve!"
                ),
                parse_mode="HTML"
            )
        except:
            pass

async def callback_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler para callbacks de confirma√ß√£o de download"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    action, token = data.split(":", 1)
    
    if token not in PENDING:
        await query.edit_message_text(MESSAGES["error_expired"])
        return
    
    pm = PENDING[token]
    
    # Verifica se o usu√°rio √© o mesmo que solicitou
    if pm["user_id"] != query.from_user.id:
        await query.answer("‚ö†Ô∏è Esta a√ß√£o n√£o pode ser realizada por voc√™.", show_alert=True)
        return
    
    if action == "cancel":
        del PENDING[token]
        await query.edit_message_text(MESSAGES["download_cancelled"])
        LOG.info("Download cancelado pelo usu√°rio %d", pm["user_id"])
        return
    
    if action == "dl":
        # Verifica quantos downloads est√£o ativos
        active_count = len(ACTIVE_DOWNLOADS)
        
        if active_count >= MAX_CONCURRENT_DOWNLOADS:
            # Mostra posi√ß√£o na fila
            queue_position = active_count - MAX_CONCURRENT_DOWNLOADS + 1
            queue_text = MESSAGES["queue_position"].format(
                position=queue_position,
                active=MAX_CONCURRENT_DOWNLOADS
            )
            await query.edit_message_text(queue_text)
        
        # Remove da lista de pendentes
        del PENDING[token]
        
        # Adiciona √† lista de downloads ativos
        ACTIVE_DOWNLOADS[token] = {
            "user_id": pm["user_id"],
            "started_at": time.time()
        }
        
        await query.edit_message_text(MESSAGES["download_started"])
        
        # Incrementa contador de downloads
        increment_download_count(pm["user_id"])
        
        # Inicia download em background
        asyncio.create_task(_process_download(token, pm))
        LOG.info("Download iniciado para usu√°rio %d (Token: %s)", pm["user_id"], token)

async def _process_download(token: str, pm: dict):
    """Processa o download em background"""
    tmpdir = None
    
    # Aguarda na fila (sem√°foro para controlar 3 downloads simult√¢neos)
    async with DOWNLOAD_SEMAPHORE:
        try:
            tmpdir = tempfile.mkdtemp(prefix=f"ytbot_")
            LOG.info("Diret√≥rio tempor√°rio criado: %s", tmpdir)
            
            try:
                await _do_download(token, pm["url"], tmpdir, pm["chat_id"], pm)
            finally:
                # Limpa arquivos tempor√°rios e envia mensagem de cleanup
                if tmpdir and os.path.exists(tmpdir):
                    try:
                        shutil.rmtree(tmpdir, ignore_errors=True)
                        cleanup_msg = MESSAGES["cleanup"].format(path=tmpdir)
                        LOG.info(cleanup_msg)
                        
                        # Envia mensagem de cleanup para o usu√°rio
                        try:
                            await application.bot.send_message(
                                chat_id=pm["chat_id"],
                                text=cleanup_msg
                            )
                        except Exception as e:
                            LOG.debug("Erro ao enviar mensagem de cleanup: %s", e)
                    except Exception as e:
                        LOG.error("Erro ao limpar tmpdir: %s", e)
                
                # Remove da lista de downloads ativos
                if token in ACTIVE_DOWNLOADS:
                    del ACTIVE_DOWNLOADS[token]
                    LOG.info("Download removido da lista ativa: %s", token)
                    
        except Exception as e:
            LOG.exception("Erro no processamento de download: %s", e)
            try:
                await application.bot.edit_message_text(
                    text=MESSAGES["error_unknown"],
                    chat_id=pm["chat_id"],
                    message_id=pm["message_id"]
                )
            except Exception:
                pass
            finally:
                # Remove da lista de downloads ativos em caso de erro
                if token in ACTIVE_DOWNLOADS:
                    del ACTIVE_DOWNLOADS[token]

async def _do_download(token: str, url: str, tmpdir: str, chat_id: int, pm: dict):
    """Executa o download do v√≠deo"""
    outtmpl = os.path.join(tmpdir, "%(title)s.%(ext)s")
    last_percent = -1
    
    # Resolve universal links da Shopee
    if 'shopee' in url.lower() and 'universal-link' in url:
        url = resolve_shopee_universal_link(url)
        LOG.info("Usando URL resolvida para download: %s", url[:100])
    
    # Verifica se √© Shopee Video - precisa tratamento especial
    if 'sv.shopee' in url.lower() or 'share-video' in url.lower():
        LOG.info("Detectado Shopee Video, usando m√©todo alternativo")
        await _download_shopee_video(url, tmpdir, chat_id, pm)
        return
    
    def progress_hook(d):
        nonlocal last_percent
        try:
            status = d.get("status")
            if status == "downloading":
                downloaded = d.get("downloaded_bytes", 0) or 0
                total = d.get("total_bytes") or d.get("total_bytes_estimate") or 0
                
                # Verifica se o tamanho est√° excedendo o limite durante download
                if total and total > MAX_FILE_SIZE:
                    LOG.warning("Download cancelado: arquivo excede 50 MB (%d bytes)", total)
                    raise Exception(f"Arquivo muito grande: {total} bytes")
                
                if total:
                    percent = int(downloaded * 100 / total)
                    if percent != last_percent and percent % 10 == 0:
                        last_percent = percent
                        blocks = int(percent / 5)
                        bar = "‚ñà" * blocks + "‚ñë" * (20 - blocks)
                        text = MESSAGES["download_progress"].format(
                            percent=percent,
                            bar=bar
                        )
                        try:
                            asyncio.run_coroutine_threadsafe(
                                application.bot.edit_message_text(
                                    text=text, 
                                    chat_id=pm["chat_id"], 
                                    message_id=pm["message_id"]
                                ),
                                APP_LOOP,
                            )
                        except Exception as e:
                            LOG.debug("Erro ao atualizar progresso: %s", e)
            elif status == "finished":
                try:
                    asyncio.run_coroutine_threadsafe(
                        application.bot.edit_message_text(
                            text=MESSAGES["download_complete"], 
                            chat_id=pm["chat_id"], 
                            message_id=pm["message_id"]
                        ),
                        APP_LOOP,
                    )
                except Exception as e:
                    LOG.debug("Erro ao atualizar status finished: %s", e)
        except Exception as e:
            LOG.error("Erro no progress_hook: %s", e)

    # Configura√ß√µes do yt-dlp
    is_shopee = 'shopee' in url.lower() or 'shope.ee' in url.lower()
    
    ydl_opts = {
        "outtmpl": outtmpl,
        "progress_hooks": [progress_hook],
        "quiet": False,
        "logger": LOG,
        "format": get_format_for_url(url),
        "merge_output_format": "mp4",
        "concurrent_fragment_downloads": 1,
        "force_ipv4": True,
        "socket_timeout": 30,
        "http_chunk_size": 1048576,
        "retries": 20,
        "fragment_retries": 20,
        "no_check_certificate": True,
        "prefer_insecure": True,
    }
    
    # Configura√ß√µes espec√≠ficas para Shopee
    if is_shopee:
        LOG.info("üõçÔ∏è Aplicando configura√ß√µes otimizadas para Shopee")
        ydl_opts.update({
            "http_headers": {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
                "Accept": "*/*",
                "Accept-Language": "pt-BR,pt;q=0.9,en-US;q=0.8,en;q=0.7",
                "Accept-Encoding": "gzip, deflate, br",
                "Referer": "https://shopee.com.br/",
                "Origin": "https://shopee.com.br",
                "Sec-Fetch-Dest": "video",
                "Sec-Fetch-Mode": "no-cors",
                "Sec-Fetch-Site": "cross-site",
            },
            "extractor_args": {
                "shopee": {
                    "api_ver": "v4"
                }
            },
            # For√ßa download direto sem fragmenta√ß√£o
            "noprogress": False,
            "keep_fragments": False,
        })
    
    # Adiciona cookies apropriados
    cookie_file = get_cookie_for_url(url)
    if cookie_file:
        ydl_opts["cookiefile"] = cookie_file

    # Executa download
    try:
        await asyncio.to_thread(lambda: _run_ydl(ydl_opts, [url]))
    except Exception as e:
        LOG.exception("Erro no yt-dlp: %s", e)
        await _notify_error(pm, "error_network")
        return

    # Envia arquivos baixados
    arquivos = [
        os.path.join(tmpdir, f) 
        for f in os.listdir(tmpdir) 
        if os.path.isfile(os.path.join(tmpdir, f))
    ]
    
    if not arquivos:
        LOG.error("Nenhum arquivo baixado")
        await _notify_error(pm, "error_unknown")
        return

    for path in arquivos:
        try:
            tamanho = os.path.getsize(path)
            
            # Verifica se o arquivo excede 50 MB
            if tamanho > MAX_FILE_SIZE:
                LOG.error("Arquivo muito grande ap√≥s download: %d bytes", tamanho)
                await _notify_error(pm, "error_file_large")
                return
            
            # Envia o v√≠deo
            with open(path, "rb") as fh:
                await application.bot.send_video(chat_id=chat_id, video=fh)
                    
        except Exception as e:
            LOG.exception("Erro ao enviar arquivo %s: %s", path, e)
            await _notify_error(pm, "error_upload")
            return

    # Mensagem de sucesso com contador de downloads
    stats = get_user_download_stats(pm["user_id"])
    
    try:
        success_text = MESSAGES["upload_complete"].format(
            remaining=stats["remaining"],
            total=stats["limit"] if not stats["is_premium"] else "‚àû"
        )
        
        await application.bot.edit_message_text(
            text=success_text,
            chat_id=pm["chat_id"],
            message_id=pm["message_id"]
        )
    except Exception as e:
        LOG.error("Erro ao enviar mensagem final: %s", e)

def _run_ydl(options, urls):
    """Executa yt-dlp com as op√ß√µes fornecidas"""
    with yt_dlp.YoutubeDL(options) as ydl:
        ydl.download(urls)

async def _notify_error(pm: dict, error_key: str):
    """Notifica o usu√°rio sobre um erro"""
    try:
        await application.bot.edit_message_text(
            text=MESSAGES.get(error_key, MESSAGES["error_unknown"]),
            chat_id=pm["chat_id"],
            message_id=pm["message_id"]
        )
    except Exception as e:
        LOG.error("Erro ao notificar erro: %s", e)

def _cleanup_pending():
    """Remove requisi√ß√µes pendentes expiradas"""
    now = time.time()
    expired = [
        token for token, pm in PENDING.items()
        if now - pm["timestamp"] > PENDING_EXPIRE_SECONDS
    ]
    for token in expired:
        del PENDING[token]
    
    # Limita tamanho m√°ximo
    while len(PENDING) > PENDING_MAX_SIZE:
        PENDING.popitem(last=False)

# ============================
# REGISTRO DE HANDLERS
# ============================

application.add_handler(CommandHandler("start", start_cmd))
application.add_handler(CommandHandler("stats", stats_cmd))
application.add_handler(CommandHandler("status", status_cmd))
application.add_handler(CommandHandler("premium", premium_cmd))
application.add_handler(CommandHandler("ai", ai_cmd))  # ‚Üê Novo comando
application.add_handler(CallbackQueryHandler(callback_confirm, pattern=r"^(dl:|cancel:)"))
application.add_handler(CallbackQueryHandler(callback_buy_premium, pattern=r"^subscribe:"))
application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

# ============================
# FLASK ROUTES
# ============================

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    """Endpoint webhook para receber updates do Telegram"""
    try:
        update_data = request.get_json(force=True)
        update = Update.de_json(update_data, application.bot)
        asyncio.run_coroutine_threadsafe(application.process_update(update), APP_LOOP)
    except Exception as e:
        LOG.exception("Falha ao processar webhook: %s", e)
    return "ok"

@app.route("/")
def index():
    """Rota principal"""
    return "ü§ñ Bot de Download Ativo"

@app.route("/health")
def health():
    """Endpoint de health check"""
    checks = {
        "bot": "ok",
        "db": "ok",
        "pending_count": len(PENDING),
        "active_downloads": len(ACTIVE_DOWNLOADS),
        "max_concurrent": MAX_CONCURRENT_DOWNLOADS,
        "queue_available": MAX_CONCURRENT_DOWNLOADS - len(ACTIVE_DOWNLOADS),
        "cookies": {
            "youtube": bool(COOKIE_YT),
            "shopee": bool(COOKIE_SHOPEE),
            "instagram": bool(COOKIE_IG)
        },
        "timestamp": time.time()
    }
    
    try:
        with DB_LOCK:
            conn = sqlite3.connect(DB_FILE, timeout=5)
            conn.execute("SELECT 1")
            conn.close()
    except Exception as e:
        checks["db"] = f"error: {str(e)}"
        LOG.error("Health check DB falhou: %s", e)
    
    try:
        bot_info = application.bot.get_me()
        checks["bot_username"] = bot_info.username
    except Exception as e:
        checks["bot"] = f"error: {str(e)}"
        LOG.error("Health check bot falhou: %s", e)
    
    status = 200 if checks["bot"] == "ok" and checks["db"] == "ok" else 503
    return checks, status
# ============================
# MERCADOPAGO
# ============================

from flask import request
import mercadopago
import os

@app.route("/webhook/pix", methods=["POST"])
def webhook_pix():
    """Endpoint para receber notifica√ß√µes de pagamento PIX do Mercado Pago"""
    try:
        data = request.get_json()
        LOG.info("Webhook PIX recebido: %s", data)

        if data.get("type") == "payment":
            payment_id = data["data"]["id"]
            sdk = mercadopago.SDK(os.getenv("MERCADOPAGO_ACCESS_TOKEN"))
            payment = sdk.payment().get(payment_id)["response"]

            if payment["status"] == "approved":
                # Extrai o valor do campo external_reference que deve conter o user_id
                reference = payment.get("external_reference")
                if reference and reference.startswith("PIX_"):
                    parts = reference.split("_")
                    if len(parts) == 3:
                        user_id = int(parts[2])
                        confirm_pix_payment(payment_reference=reference, user_id=user_id)
                        LOG.info("Pagamento confirmado e premium ativado para user_id=%s", user_id)
                    else:
                        LOG.warning("Formato de refer√™ncia inv√°lido: %s", reference)
                else:
                    LOG.warning("Refer√™ncia externa ausente ou inv√°lida: %s", reference)

        return "ok", 200

    except Exception as e:
        LOG.exception("Erro no webhook PIX: %s", e)
        return "erro", 500
        
# ============================
# MAIN
# ============================

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    LOG.info("Iniciando servidor Flask na porta %d", port)
    app.run(host="0.0.0.0", port=port)


from telegram.constants import ParseMode
import mercadopago

async def subscribe_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    try:
        reference = create_pix_payment(user_id, 9.90)
        sdk = mercadopago.SDK(os.getenv("MERCADOPAGO_ACCESS_TOKEN"))

        payment_data = {
            "transaction_amount": 9.90,
            "description": "Plano Premium",
            "payment_method_id": "pix",
            "payer": {"email": f"user{user_id}@example.com"},
            "external_reference": reference
        }

        result = sdk.payment().create(payment_data)
        response = result.get("response", {})

        if response.get("status") == "pending":
            qr_code_base64 = response["point_of_interaction"]["transaction_data"]["qr_code_base64"]
            qr_code_text = response["point_of_interaction"]["transaction_data"]["qr_code"]

            await query.edit_message_text(
                (
                    f"‚úÖ Pedido criado!\n\n"
                    f"<code>{qr_code_text}</code>\n\n"
                    "üñºÔ∏è Escaneie o QR Code abaixo para pagar:"
                ),
                parse_mode=ParseMode.HTML
            )

            await context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=f"data:image/png;base64,{qr_code_base64}"
            )
        else:
            await query.edit_message_text("‚ùå Erro ao criar pagamento. Tente novamente mais tarde.")
    except Exception as e:
        await query.edit_message_text(f"‚ùå Falha interna: {e}")
